[gcode_macro _AIR_FILTER_VARIABLES]
variable_fan: 'fan_generic Uhlik'                     # The fan to track.
variable_hours_until_replacement: 50                       # total hours the filter can run before media needs replacing
variable_replacement_gcode: 'M117 Air Filter capacity is depleted, consider replacing filter media'

# gcode to run when the media needs to be replaced (will be repeated every second until reset)
variable_time: -1
gcode:


[gcode_macro RESET_AIR_FILTER]
description: Resets the air-filter replacement timer
gcode:
  SET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE=0
  SAVE_VARIABLE VARIABLE=air_filter_time VALUE=0
  { action_respond_info("Air filter timer has been reset.") }

[gcode_macro QUERY_AIR_FILTER]
description: Displays the amount of time the air filter has run since it was last reset.
gcode:
  {% set hours = "%.2f"|format(printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float / 3600) %}
  {% set life = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float %}
  {% set rest = life - hours|float %}
  
  {% if rest <= 0 %}
    { action_respond_info("Air Filter capacity is depleted, consider replacing filter media") }
  {% else %}
    { action_respond_info("Life expectancy of new filter media is " ~ life ~ " hours.") }
    { action_respond_info("Air Filter used for: " ~ hours ~ " hours." ) }
    { action_respond_info("Hours remaining: " ~ rest ~ ".") }
  {% endif %}


  
#[gcode_macro QUERY_AIR_FILTER]
#description: Displays the amount of time the air filter has run since it was last reset.
#gcode:
#  {% set hours = "%.2f"|format(printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int / 3600) %}
#  { action_respond_info("Air Filter Hours: " + hours) }



[delayed_gcode _AIR_FILTER_TIMER]
initial_duration: 1
gcode:
  {% set cached_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|int %}
    {% if cached_time == -1 %}
      {% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}
      SET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time }
    {% endif %}
  {% if printer[printer['gcode_macro _AIR_FILTER_VARIABLES'].fan].speed|float > 0 %}
    SET_GCODE_VARIABLE MACRO=_AIR_FILTER_VARIABLES VARIABLE=time VALUE={ cached_time + 1}
  {% endif %}
  {% set replacement_seconds = printer['gcode_macro _AIR_FILTER_VARIABLES'].hours_until_replacement|float * 3600 %}
  {% if cached_time > replacement_seconds %}
  { printer['gcode_macro _AIR_FILTER_VARIABLES'].replacement_gcode }
  {% endif %}
  UPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1


[delayed_gcode _AIR_FILTER_FLUSH_TIMER]
initial_duration: 300
gcode:
  {% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}
  {% set actual_time = printer['gcode_macro _AIR_FILTER_VARIABLES'].time|float %}
  {% if saved_time != actual_time %}
    SAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}
  {% endif %}
  UPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300


[gcode_macro _BEDFANVARS]
variable_threshold: 90	
variable_fast: 0.55	# Fan speed once bed temp is reached  
variable_slow: 0.45	# Fan speed while bed is heating
gcode:

[fan_generic Uhlik] 
pin: PD0
kick_start_time: 1

[gcode_macro BEDFANSSLOW]
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
	
	SET_FAN_SPEED FAN=Uhlik SPEED={SLOW}

[gcode_macro BEDFANSFAST]
gcode:
	# Vars
	{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
	
	SET_FAN_SPEED FAN=Uhlik SPEED={FAST}

[gcode_macro BEDFANSOFF]
gcode:
	SET_FAN_SPEED FAN=Uhlik SPEED=0

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BEDFANSSLOW
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
		{% else %}
			BEDFANSOFF
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 
		{% endif %}
	{% endif %}
	
[gcode_macro M190]
rename_existing: M99190
gcode:
	{% set S = params.S|int %}
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BEDFANSSLOW																
	{% else %}
		BEDFANSOFF																
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	
	{% endif %}


	{% if S >= THRESHOLD %}								    
		BEDFANSFAST																
	{% endif %}
	
[gcode_macro M140]
rename_existing: M99140
gcode:

	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BEDFANSOFF
	_TURN_OFF_HEATERS
	
[delayed_gcode bedfanloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			BEDFANSFAST															
		{% else %}
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5						
		{% endif %}
	{% endif %}
